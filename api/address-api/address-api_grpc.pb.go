// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: api/address-api/address-api.proto

package addressapi

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AddressService_FindAllAddress_FullMethodName           = "/AddressService/FindAllAddress"
	AddressService_FindAllNameOfAddressUnit_FullMethodName = "/AddressService/FindAllNameOfAddressUnit"
	AddressService_CheckExistAddress_FullMethodName        = "/AddressService/CheckExistAddress"
)

// AddressServiceClient is the client API for AddressService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AddressServiceClient interface {
	FindAllAddress(ctx context.Context, in *FindAllAddressRequest, opts ...grpc.CallOption) (*FindAllAddressResponse, error)
	FindAllNameOfAddressUnit(ctx context.Context, in *FindAllNameOfAddressUnitRequest, opts ...grpc.CallOption) (*FindAllNameOfAddressUnitResponse, error)
	CheckExistAddress(ctx context.Context, in *CheckExistAddressRequest, opts ...grpc.CallOption) (*CheckExistAddressResponse, error)
}

type addressServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAddressServiceClient(cc grpc.ClientConnInterface) AddressServiceClient {
	return &addressServiceClient{cc}
}

func (c *addressServiceClient) FindAllAddress(ctx context.Context, in *FindAllAddressRequest, opts ...grpc.CallOption) (*FindAllAddressResponse, error) {
	out := new(FindAllAddressResponse)
	err := c.cc.Invoke(ctx, AddressService_FindAllAddress_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *addressServiceClient) FindAllNameOfAddressUnit(ctx context.Context, in *FindAllNameOfAddressUnitRequest, opts ...grpc.CallOption) (*FindAllNameOfAddressUnitResponse, error) {
	out := new(FindAllNameOfAddressUnitResponse)
	err := c.cc.Invoke(ctx, AddressService_FindAllNameOfAddressUnit_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *addressServiceClient) CheckExistAddress(ctx context.Context, in *CheckExistAddressRequest, opts ...grpc.CallOption) (*CheckExistAddressResponse, error) {
	out := new(CheckExistAddressResponse)
	err := c.cc.Invoke(ctx, AddressService_CheckExistAddress_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AddressServiceServer is the server API for AddressService service.
// All implementations must embed UnimplementedAddressServiceServer
// for forward compatibility
type AddressServiceServer interface {
	FindAllAddress(context.Context, *FindAllAddressRequest) (*FindAllAddressResponse, error)
	FindAllNameOfAddressUnit(context.Context, *FindAllNameOfAddressUnitRequest) (*FindAllNameOfAddressUnitResponse, error)
	CheckExistAddress(context.Context, *CheckExistAddressRequest) (*CheckExistAddressResponse, error)
	mustEmbedUnimplementedAddressServiceServer()
}

// UnimplementedAddressServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAddressServiceServer struct {
}

func (UnimplementedAddressServiceServer) FindAllAddress(context.Context, *FindAllAddressRequest) (*FindAllAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAllAddress not implemented")
}
func (UnimplementedAddressServiceServer) FindAllNameOfAddressUnit(context.Context, *FindAllNameOfAddressUnitRequest) (*FindAllNameOfAddressUnitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAllNameOfAddressUnit not implemented")
}
func (UnimplementedAddressServiceServer) CheckExistAddress(context.Context, *CheckExistAddressRequest) (*CheckExistAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckExistAddress not implemented")
}
func (UnimplementedAddressServiceServer) mustEmbedUnimplementedAddressServiceServer() {}

// UnsafeAddressServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AddressServiceServer will
// result in compilation errors.
type UnsafeAddressServiceServer interface {
	mustEmbedUnimplementedAddressServiceServer()
}

func RegisterAddressServiceServer(s grpc.ServiceRegistrar, srv AddressServiceServer) {
	s.RegisterService(&AddressService_ServiceDesc, srv)
}

func _AddressService_FindAllAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindAllAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AddressServiceServer).FindAllAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AddressService_FindAllAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AddressServiceServer).FindAllAddress(ctx, req.(*FindAllAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AddressService_FindAllNameOfAddressUnit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindAllNameOfAddressUnitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AddressServiceServer).FindAllNameOfAddressUnit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AddressService_FindAllNameOfAddressUnit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AddressServiceServer).FindAllNameOfAddressUnit(ctx, req.(*FindAllNameOfAddressUnitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AddressService_CheckExistAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckExistAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AddressServiceServer).CheckExistAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AddressService_CheckExistAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AddressServiceServer).CheckExistAddress(ctx, req.(*CheckExistAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AddressService_ServiceDesc is the grpc.ServiceDesc for AddressService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AddressService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "AddressService",
	HandlerType: (*AddressServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindAllAddress",
			Handler:    _AddressService_FindAllAddress_Handler,
		},
		{
			MethodName: "FindAllNameOfAddressUnit",
			Handler:    _AddressService_FindAllNameOfAddressUnit_Handler,
		},
		{
			MethodName: "CheckExistAddress",
			Handler:    _AddressService_CheckExistAddress_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/address-api/address-api.proto",
}
