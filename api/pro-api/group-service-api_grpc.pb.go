// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: api/pro-api/group-service-api.proto

package proapi

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	GroupServiceManager_ListGroupServices_FullMethodName           = "/GroupServiceManager/ListGroupServices"
	GroupServiceManager_FulltextSearchGroupServices_FullMethodName = "/GroupServiceManager/FulltextSearchGroupServices"
	GroupServiceManager_GetGroupService_FullMethodName             = "/GroupServiceManager/GetGroupService"
	GroupServiceManager_CreateGroupService_FullMethodName          = "/GroupServiceManager/CreateGroupService"
	GroupServiceManager_UpdateGroupService_FullMethodName          = "/GroupServiceManager/UpdateGroupService"
	GroupServiceManager_DeleteGroupService_FullMethodName          = "/GroupServiceManager/DeleteGroupService"
)

// GroupServiceManagerClient is the client API for GroupServiceManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GroupServiceManagerClient interface {
	ListGroupServices(ctx context.Context, in *ListGroupServicesRequest, opts ...grpc.CallOption) (*ListGroupServicesResponse, error)
	FulltextSearchGroupServices(ctx context.Context, in *FulltextSearchGroupServicesRequest, opts ...grpc.CallOption) (*ListGroupServicesResponse, error)
	GetGroupService(ctx context.Context, in *GetGroupServiceRequest, opts ...grpc.CallOption) (*GroupService, error)
	CreateGroupService(ctx context.Context, in *CreateGroupServiceRequest, opts ...grpc.CallOption) (*GroupService, error)
	UpdateGroupService(ctx context.Context, in *UpdateGroupServiceRequest, opts ...grpc.CallOption) (*GroupService, error)
	DeleteGroupService(ctx context.Context, in *DeleteGroupServiceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type groupServiceManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewGroupServiceManagerClient(cc grpc.ClientConnInterface) GroupServiceManagerClient {
	return &groupServiceManagerClient{cc}
}

func (c *groupServiceManagerClient) ListGroupServices(ctx context.Context, in *ListGroupServicesRequest, opts ...grpc.CallOption) (*ListGroupServicesResponse, error) {
	out := new(ListGroupServicesResponse)
	err := c.cc.Invoke(ctx, GroupServiceManager_ListGroupServices_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupServiceManagerClient) FulltextSearchGroupServices(ctx context.Context, in *FulltextSearchGroupServicesRequest, opts ...grpc.CallOption) (*ListGroupServicesResponse, error) {
	out := new(ListGroupServicesResponse)
	err := c.cc.Invoke(ctx, GroupServiceManager_FulltextSearchGroupServices_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupServiceManagerClient) GetGroupService(ctx context.Context, in *GetGroupServiceRequest, opts ...grpc.CallOption) (*GroupService, error) {
	out := new(GroupService)
	err := c.cc.Invoke(ctx, GroupServiceManager_GetGroupService_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupServiceManagerClient) CreateGroupService(ctx context.Context, in *CreateGroupServiceRequest, opts ...grpc.CallOption) (*GroupService, error) {
	out := new(GroupService)
	err := c.cc.Invoke(ctx, GroupServiceManager_CreateGroupService_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupServiceManagerClient) UpdateGroupService(ctx context.Context, in *UpdateGroupServiceRequest, opts ...grpc.CallOption) (*GroupService, error) {
	out := new(GroupService)
	err := c.cc.Invoke(ctx, GroupServiceManager_UpdateGroupService_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupServiceManagerClient) DeleteGroupService(ctx context.Context, in *DeleteGroupServiceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, GroupServiceManager_DeleteGroupService_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GroupServiceManagerServer is the server API for GroupServiceManager service.
// All implementations must embed UnimplementedGroupServiceManagerServer
// for forward compatibility
type GroupServiceManagerServer interface {
	ListGroupServices(context.Context, *ListGroupServicesRequest) (*ListGroupServicesResponse, error)
	FulltextSearchGroupServices(context.Context, *FulltextSearchGroupServicesRequest) (*ListGroupServicesResponse, error)
	GetGroupService(context.Context, *GetGroupServiceRequest) (*GroupService, error)
	CreateGroupService(context.Context, *CreateGroupServiceRequest) (*GroupService, error)
	UpdateGroupService(context.Context, *UpdateGroupServiceRequest) (*GroupService, error)
	DeleteGroupService(context.Context, *DeleteGroupServiceRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedGroupServiceManagerServer()
}

// UnimplementedGroupServiceManagerServer must be embedded to have forward compatible implementations.
type UnimplementedGroupServiceManagerServer struct {
}

func (UnimplementedGroupServiceManagerServer) ListGroupServices(context.Context, *ListGroupServicesRequest) (*ListGroupServicesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListGroupServices not implemented")
}
func (UnimplementedGroupServiceManagerServer) FulltextSearchGroupServices(context.Context, *FulltextSearchGroupServicesRequest) (*ListGroupServicesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FulltextSearchGroupServices not implemented")
}
func (UnimplementedGroupServiceManagerServer) GetGroupService(context.Context, *GetGroupServiceRequest) (*GroupService, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroupService not implemented")
}
func (UnimplementedGroupServiceManagerServer) CreateGroupService(context.Context, *CreateGroupServiceRequest) (*GroupService, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGroupService not implemented")
}
func (UnimplementedGroupServiceManagerServer) UpdateGroupService(context.Context, *UpdateGroupServiceRequest) (*GroupService, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGroupService not implemented")
}
func (UnimplementedGroupServiceManagerServer) DeleteGroupService(context.Context, *DeleteGroupServiceRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGroupService not implemented")
}
func (UnimplementedGroupServiceManagerServer) mustEmbedUnimplementedGroupServiceManagerServer() {}

// UnsafeGroupServiceManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GroupServiceManagerServer will
// result in compilation errors.
type UnsafeGroupServiceManagerServer interface {
	mustEmbedUnimplementedGroupServiceManagerServer()
}

func RegisterGroupServiceManagerServer(s grpc.ServiceRegistrar, srv GroupServiceManagerServer) {
	s.RegisterService(&GroupServiceManager_ServiceDesc, srv)
}

func _GroupServiceManager_ListGroupServices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListGroupServicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServiceManagerServer).ListGroupServices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupServiceManager_ListGroupServices_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServiceManagerServer).ListGroupServices(ctx, req.(*ListGroupServicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupServiceManager_FulltextSearchGroupServices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FulltextSearchGroupServicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServiceManagerServer).FulltextSearchGroupServices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupServiceManager_FulltextSearchGroupServices_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServiceManagerServer).FulltextSearchGroupServices(ctx, req.(*FulltextSearchGroupServicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupServiceManager_GetGroupService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGroupServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServiceManagerServer).GetGroupService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupServiceManager_GetGroupService_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServiceManagerServer).GetGroupService(ctx, req.(*GetGroupServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupServiceManager_CreateGroupService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGroupServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServiceManagerServer).CreateGroupService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupServiceManager_CreateGroupService_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServiceManagerServer).CreateGroupService(ctx, req.(*CreateGroupServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupServiceManager_UpdateGroupService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGroupServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServiceManagerServer).UpdateGroupService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupServiceManager_UpdateGroupService_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServiceManagerServer).UpdateGroupService(ctx, req.(*UpdateGroupServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupServiceManager_DeleteGroupService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteGroupServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServiceManagerServer).DeleteGroupService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupServiceManager_DeleteGroupService_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServiceManagerServer).DeleteGroupService(ctx, req.(*DeleteGroupServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GroupServiceManager_ServiceDesc is the grpc.ServiceDesc for GroupServiceManager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GroupServiceManager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "GroupServiceManager",
	HandlerType: (*GroupServiceManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListGroupServices",
			Handler:    _GroupServiceManager_ListGroupServices_Handler,
		},
		{
			MethodName: "FulltextSearchGroupServices",
			Handler:    _GroupServiceManager_FulltextSearchGroupServices_Handler,
		},
		{
			MethodName: "GetGroupService",
			Handler:    _GroupServiceManager_GetGroupService_Handler,
		},
		{
			MethodName: "CreateGroupService",
			Handler:    _GroupServiceManager_CreateGroupService_Handler,
		},
		{
			MethodName: "UpdateGroupService",
			Handler:    _GroupServiceManager_UpdateGroupService_Handler,
		},
		{
			MethodName: "DeleteGroupService",
			Handler:    _GroupServiceManager_DeleteGroupService_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/pro-api/group-service-api.proto",
}
