// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.3
// source: api/pro-api/pro-api.proto

package proapi

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ProServiceClient is the client API for ProService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProServiceClient interface {
	// Find providers based on search criteria
	FindPros(ctx context.Context, in *FindProsRequest, opts ...grpc.CallOption) (*FindProsResponse, error)
	// Find providers based on search by id
	FindProById(ctx context.Context, in *FindProByIdRequest, opts ...grpc.CallOption) (*FindProByIdResponse, error)
	// get provider profile of user logined
	GetProviderProfile(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ProviderProfileResponse, error)
	// delete pro by id
	DeleteProById(ctx context.Context, in *DeleteProByIdRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Sign up as a provider
	SignUpPro(ctx context.Context, in *SignUpProRequest, opts ...grpc.CallOption) (*ProviderInfo, error)
	// get token of provider
	JoinAsProvider(ctx context.Context, in *JoinAsProviderRequest, opts ...grpc.CallOption) (*JoinAsProviderResponse, error)
	// Update information of a professional
	UpdatePro(ctx context.Context, in *UpdateProRequest, opts ...grpc.CallOption) (*ProviderInfo, error)
	// Add a payment method for a professional
	AddPaymentMethodPro(ctx context.Context, in *AddPaymentMethodProRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Reply to a review as a professional
	ReplyReviewPro(ctx context.Context, in *ReplyReviewProRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Review a professional as a user
	ReviewPro(ctx context.Context, in *ReviewProRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Add a service offered by a professional
	AddServicePro(ctx context.Context, in *AddServiceProRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Add social media information for a professional
	AddSocialMediaPro(ctx context.Context, in *AddSocialMediaProRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type proServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProServiceClient(cc grpc.ClientConnInterface) ProServiceClient {
	return &proServiceClient{cc}
}

func (c *proServiceClient) FindPros(ctx context.Context, in *FindProsRequest, opts ...grpc.CallOption) (*FindProsResponse, error) {
	out := new(FindProsResponse)
	err := c.cc.Invoke(ctx, "/ProService/FindPros", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proServiceClient) FindProById(ctx context.Context, in *FindProByIdRequest, opts ...grpc.CallOption) (*FindProByIdResponse, error) {
	out := new(FindProByIdResponse)
	err := c.cc.Invoke(ctx, "/ProService/FindProById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proServiceClient) GetProviderProfile(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ProviderProfileResponse, error) {
	out := new(ProviderProfileResponse)
	err := c.cc.Invoke(ctx, "/ProService/GetProviderProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proServiceClient) DeleteProById(ctx context.Context, in *DeleteProByIdRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/ProService/DeleteProById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proServiceClient) SignUpPro(ctx context.Context, in *SignUpProRequest, opts ...grpc.CallOption) (*ProviderInfo, error) {
	out := new(ProviderInfo)
	err := c.cc.Invoke(ctx, "/ProService/SignUpPro", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proServiceClient) JoinAsProvider(ctx context.Context, in *JoinAsProviderRequest, opts ...grpc.CallOption) (*JoinAsProviderResponse, error) {
	out := new(JoinAsProviderResponse)
	err := c.cc.Invoke(ctx, "/ProService/JoinAsProvider", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proServiceClient) UpdatePro(ctx context.Context, in *UpdateProRequest, opts ...grpc.CallOption) (*ProviderInfo, error) {
	out := new(ProviderInfo)
	err := c.cc.Invoke(ctx, "/ProService/UpdatePro", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proServiceClient) AddPaymentMethodPro(ctx context.Context, in *AddPaymentMethodProRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/ProService/AddPaymentMethodPro", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proServiceClient) ReplyReviewPro(ctx context.Context, in *ReplyReviewProRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/ProService/ReplyReviewPro", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proServiceClient) ReviewPro(ctx context.Context, in *ReviewProRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/ProService/ReviewPro", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proServiceClient) AddServicePro(ctx context.Context, in *AddServiceProRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/ProService/AddServicePro", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proServiceClient) AddSocialMediaPro(ctx context.Context, in *AddSocialMediaProRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/ProService/AddSocialMediaPro", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProServiceServer is the server API for ProService service.
// All implementations must embed UnimplementedProServiceServer
// for forward compatibility
type ProServiceServer interface {
	// Find providers based on search criteria
	FindPros(context.Context, *FindProsRequest) (*FindProsResponse, error)
	// Find providers based on search by id
	FindProById(context.Context, *FindProByIdRequest) (*FindProByIdResponse, error)
	// get provider profile of user logined
	GetProviderProfile(context.Context, *emptypb.Empty) (*ProviderProfileResponse, error)
	// delete pro by id
	DeleteProById(context.Context, *DeleteProByIdRequest) (*emptypb.Empty, error)
	// Sign up as a provider
	SignUpPro(context.Context, *SignUpProRequest) (*ProviderInfo, error)
	// get token of provider
	JoinAsProvider(context.Context, *JoinAsProviderRequest) (*JoinAsProviderResponse, error)
	// Update information of a professional
	UpdatePro(context.Context, *UpdateProRequest) (*ProviderInfo, error)
	// Add a payment method for a professional
	AddPaymentMethodPro(context.Context, *AddPaymentMethodProRequest) (*emptypb.Empty, error)
	// Reply to a review as a professional
	ReplyReviewPro(context.Context, *ReplyReviewProRequest) (*emptypb.Empty, error)
	// Review a professional as a user
	ReviewPro(context.Context, *ReviewProRequest) (*emptypb.Empty, error)
	// Add a service offered by a professional
	AddServicePro(context.Context, *AddServiceProRequest) (*emptypb.Empty, error)
	// Add social media information for a professional
	AddSocialMediaPro(context.Context, *AddSocialMediaProRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedProServiceServer()
}

// UnimplementedProServiceServer must be embedded to have forward compatible implementations.
type UnimplementedProServiceServer struct {
}

func (UnimplementedProServiceServer) FindPros(context.Context, *FindProsRequest) (*FindProsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindPros not implemented")
}
func (UnimplementedProServiceServer) FindProById(context.Context, *FindProByIdRequest) (*FindProByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindProById not implemented")
}
func (UnimplementedProServiceServer) GetProviderProfile(context.Context, *emptypb.Empty) (*ProviderProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProviderProfile not implemented")
}
func (UnimplementedProServiceServer) DeleteProById(context.Context, *DeleteProByIdRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProById not implemented")
}
func (UnimplementedProServiceServer) SignUpPro(context.Context, *SignUpProRequest) (*ProviderInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignUpPro not implemented")
}
func (UnimplementedProServiceServer) JoinAsProvider(context.Context, *JoinAsProviderRequest) (*JoinAsProviderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinAsProvider not implemented")
}
func (UnimplementedProServiceServer) UpdatePro(context.Context, *UpdateProRequest) (*ProviderInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePro not implemented")
}
func (UnimplementedProServiceServer) AddPaymentMethodPro(context.Context, *AddPaymentMethodProRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPaymentMethodPro not implemented")
}
func (UnimplementedProServiceServer) ReplyReviewPro(context.Context, *ReplyReviewProRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReplyReviewPro not implemented")
}
func (UnimplementedProServiceServer) ReviewPro(context.Context, *ReviewProRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReviewPro not implemented")
}
func (UnimplementedProServiceServer) AddServicePro(context.Context, *AddServiceProRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddServicePro not implemented")
}
func (UnimplementedProServiceServer) AddSocialMediaPro(context.Context, *AddSocialMediaProRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddSocialMediaPro not implemented")
}
func (UnimplementedProServiceServer) mustEmbedUnimplementedProServiceServer() {}

// UnsafeProServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProServiceServer will
// result in compilation errors.
type UnsafeProServiceServer interface {
	mustEmbedUnimplementedProServiceServer()
}

func RegisterProServiceServer(s grpc.ServiceRegistrar, srv ProServiceServer) {
	s.RegisterService(&ProService_ServiceDesc, srv)
}

func _ProService_FindPros_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindProsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProServiceServer).FindPros(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ProService/FindPros",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProServiceServer).FindPros(ctx, req.(*FindProsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProService_FindProById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindProByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProServiceServer).FindProById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ProService/FindProById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProServiceServer).FindProById(ctx, req.(*FindProByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProService_GetProviderProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProServiceServer).GetProviderProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ProService/GetProviderProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProServiceServer).GetProviderProfile(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProService_DeleteProById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteProByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProServiceServer).DeleteProById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ProService/DeleteProById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProServiceServer).DeleteProById(ctx, req.(*DeleteProByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProService_SignUpPro_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignUpProRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProServiceServer).SignUpPro(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ProService/SignUpPro",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProServiceServer).SignUpPro(ctx, req.(*SignUpProRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProService_JoinAsProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinAsProviderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProServiceServer).JoinAsProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ProService/JoinAsProvider",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProServiceServer).JoinAsProvider(ctx, req.(*JoinAsProviderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProService_UpdatePro_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProServiceServer).UpdatePro(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ProService/UpdatePro",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProServiceServer).UpdatePro(ctx, req.(*UpdateProRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProService_AddPaymentMethodPro_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddPaymentMethodProRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProServiceServer).AddPaymentMethodPro(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ProService/AddPaymentMethodPro",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProServiceServer).AddPaymentMethodPro(ctx, req.(*AddPaymentMethodProRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProService_ReplyReviewPro_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReplyReviewProRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProServiceServer).ReplyReviewPro(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ProService/ReplyReviewPro",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProServiceServer).ReplyReviewPro(ctx, req.(*ReplyReviewProRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProService_ReviewPro_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReviewProRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProServiceServer).ReviewPro(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ProService/ReviewPro",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProServiceServer).ReviewPro(ctx, req.(*ReviewProRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProService_AddServicePro_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddServiceProRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProServiceServer).AddServicePro(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ProService/AddServicePro",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProServiceServer).AddServicePro(ctx, req.(*AddServiceProRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProService_AddSocialMediaPro_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddSocialMediaProRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProServiceServer).AddSocialMediaPro(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ProService/AddSocialMediaPro",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProServiceServer).AddSocialMediaPro(ctx, req.(*AddSocialMediaProRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProService_ServiceDesc is the grpc.ServiceDesc for ProService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ProService",
	HandlerType: (*ProServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindPros",
			Handler:    _ProService_FindPros_Handler,
		},
		{
			MethodName: "FindProById",
			Handler:    _ProService_FindProById_Handler,
		},
		{
			MethodName: "GetProviderProfile",
			Handler:    _ProService_GetProviderProfile_Handler,
		},
		{
			MethodName: "DeleteProById",
			Handler:    _ProService_DeleteProById_Handler,
		},
		{
			MethodName: "SignUpPro",
			Handler:    _ProService_SignUpPro_Handler,
		},
		{
			MethodName: "JoinAsProvider",
			Handler:    _ProService_JoinAsProvider_Handler,
		},
		{
			MethodName: "UpdatePro",
			Handler:    _ProService_UpdatePro_Handler,
		},
		{
			MethodName: "AddPaymentMethodPro",
			Handler:    _ProService_AddPaymentMethodPro_Handler,
		},
		{
			MethodName: "ReplyReviewPro",
			Handler:    _ProService_ReplyReviewPro_Handler,
		},
		{
			MethodName: "ReviewPro",
			Handler:    _ProService_ReviewPro_Handler,
		},
		{
			MethodName: "AddServicePro",
			Handler:    _ProService_AddServicePro_Handler,
		},
		{
			MethodName: "AddSocialMediaPro",
			Handler:    _ProService_AddSocialMediaPro_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/pro-api/pro-api.proto",
}

// HireServiceClient is the client API for HireService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HireServiceClient interface {
	// Retrieves all hires
	FindAllHire(ctx context.Context, in *FindAllHireRequest, opts ...grpc.CallOption) (*FindAllHireResponse, error)
	// Creates a new hire
	CreateHire(ctx context.Context, in *CreateHireRequest, opts ...grpc.CallOption) (*CreateHireResponse, error)
	// Updates the status of a hire
	UpdateStatusHire(ctx context.Context, in *UpdateStatusHireRequest, opts ...grpc.CallOption) (*UpdateStatusHireResponse, error)
	// Deletes a hire (assuming it's idempotent)
	DeleteHire(ctx context.Context, in *DeleteHireRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type hireServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHireServiceClient(cc grpc.ClientConnInterface) HireServiceClient {
	return &hireServiceClient{cc}
}

func (c *hireServiceClient) FindAllHire(ctx context.Context, in *FindAllHireRequest, opts ...grpc.CallOption) (*FindAllHireResponse, error) {
	out := new(FindAllHireResponse)
	err := c.cc.Invoke(ctx, "/HireService/FindAllHire", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hireServiceClient) CreateHire(ctx context.Context, in *CreateHireRequest, opts ...grpc.CallOption) (*CreateHireResponse, error) {
	out := new(CreateHireResponse)
	err := c.cc.Invoke(ctx, "/HireService/CreateHire", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hireServiceClient) UpdateStatusHire(ctx context.Context, in *UpdateStatusHireRequest, opts ...grpc.CallOption) (*UpdateStatusHireResponse, error) {
	out := new(UpdateStatusHireResponse)
	err := c.cc.Invoke(ctx, "/HireService/UpdateStatusHire", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hireServiceClient) DeleteHire(ctx context.Context, in *DeleteHireRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/HireService/DeleteHire", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HireServiceServer is the server API for HireService service.
// All implementations must embed UnimplementedHireServiceServer
// for forward compatibility
type HireServiceServer interface {
	// Retrieves all hires
	FindAllHire(context.Context, *FindAllHireRequest) (*FindAllHireResponse, error)
	// Creates a new hire
	CreateHire(context.Context, *CreateHireRequest) (*CreateHireResponse, error)
	// Updates the status of a hire
	UpdateStatusHire(context.Context, *UpdateStatusHireRequest) (*UpdateStatusHireResponse, error)
	// Deletes a hire (assuming it's idempotent)
	DeleteHire(context.Context, *DeleteHireRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedHireServiceServer()
}

// UnimplementedHireServiceServer must be embedded to have forward compatible implementations.
type UnimplementedHireServiceServer struct {
}

func (UnimplementedHireServiceServer) FindAllHire(context.Context, *FindAllHireRequest) (*FindAllHireResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAllHire not implemented")
}
func (UnimplementedHireServiceServer) CreateHire(context.Context, *CreateHireRequest) (*CreateHireResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateHire not implemented")
}
func (UnimplementedHireServiceServer) UpdateStatusHire(context.Context, *UpdateStatusHireRequest) (*UpdateStatusHireResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStatusHire not implemented")
}
func (UnimplementedHireServiceServer) DeleteHire(context.Context, *DeleteHireRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteHire not implemented")
}
func (UnimplementedHireServiceServer) mustEmbedUnimplementedHireServiceServer() {}

// UnsafeHireServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HireServiceServer will
// result in compilation errors.
type UnsafeHireServiceServer interface {
	mustEmbedUnimplementedHireServiceServer()
}

func RegisterHireServiceServer(s grpc.ServiceRegistrar, srv HireServiceServer) {
	s.RegisterService(&HireService_ServiceDesc, srv)
}

func _HireService_FindAllHire_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindAllHireRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HireServiceServer).FindAllHire(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/HireService/FindAllHire",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HireServiceServer).FindAllHire(ctx, req.(*FindAllHireRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HireService_CreateHire_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateHireRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HireServiceServer).CreateHire(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/HireService/CreateHire",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HireServiceServer).CreateHire(ctx, req.(*CreateHireRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HireService_UpdateStatusHire_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateStatusHireRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HireServiceServer).UpdateStatusHire(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/HireService/UpdateStatusHire",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HireServiceServer).UpdateStatusHire(ctx, req.(*UpdateStatusHireRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HireService_DeleteHire_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteHireRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HireServiceServer).DeleteHire(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/HireService/DeleteHire",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HireServiceServer).DeleteHire(ctx, req.(*DeleteHireRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// HireService_ServiceDesc is the grpc.ServiceDesc for HireService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HireService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "HireService",
	HandlerType: (*HireServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindAllHire",
			Handler:    _HireService_FindAllHire_Handler,
		},
		{
			MethodName: "CreateHire",
			Handler:    _HireService_CreateHire_Handler,
		},
		{
			MethodName: "UpdateStatusHire",
			Handler:    _HireService_UpdateStatusHire_Handler,
		},
		{
			MethodName: "DeleteHire",
			Handler:    _HireService_DeleteHire_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/pro-api/pro-api.proto",
}
