syntax = "proto3";

option go_package="github.com/nguyentrunghieu15/be-beehome-prj/proto/proapi";


import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "api/pro-api/message.proto";
import "google/protobuf/empty.proto";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {
    title: "Pro Api For BeeHome";
    version: "2.0";
    contact: {
      name: "Author";
      url: "github.com/nguyentrunghieu15";
      email: "thanime.15112002@gmail.com";
    };
  };
  // Overwriting host entry breaks tests, so this is not done here.
  external_docs: {
    url: "https://github.com/grpc-ecosystem/grpc-gateway";
    description: "More about gRPC-Gateway";
  }
  
  schemes: HTTP;
  schemes: HTTPS;
  consumes: "application/json";
  produces: "application/json";
  security_definitions: {
    security: {
      key: "ApiKeyAuth";
      value: {
        type: TYPE_API_KEY;
        in: IN_HEADER;
        name: "Authorization";
      }
    },
    security: {
      key: "ProviderIdHeader";
      value: {
        type: TYPE_API_KEY;
        in: IN_HEADER;
        name: "Provider-Id";
      }
    }
  },
  security: {
    security_requirement: {
      key: "ApiKeyAuth";
      value: {};
    },
    security_requirement: {
      key: "ProviderIdHeader";
      value: {};
    }
  }

};


service ProService {
  // Find providers based on search criteria
  rpc FindPros (FindProsRequest) returns (FindProsResponse) {
    option (google.api.http) = {
      get: "/api/v1/providers"
    };
  }

  // Find providers based on search by id
  rpc FindProById (FindProByIdRequest) returns (FindProByIdResponse){
    option (google.api.http) = {
      get: "/api/v1/providers/{id}"
    };
  }

  rpc GetAllServiceOfProvider (GetAllServiceOfProviderRequest) returns (GetAllServiceOfProviderResponse){
    option (google.api.http) = {
      get: "/api/v1/providers/{id}/services"
    };
  };

  rpc GetAllReviewsOfProvider (GetAllReviewOfProviderRequest) returns (GetAllReviewOfProviderResponse){
    option (google.api.http) = {
      get: "/api/v1/providers/{id}/reviews"
    };
  };

  // get provider profile of user logined
  rpc GetProviderProfile (google.protobuf.Empty) returns (ProviderProfileResponse){
    option (google.api.http) = {
      get: "/api/v1/providers/owner/profile"
    };
  }

  //delete pro by id
  rpc DeleteProById (DeleteProByIdRequest) returns (google.protobuf.Empty){
    option (google.api.http) = {
      delete: "/api/v1/providers/{id}"
    };
  }

  // Sign up as a provider
  rpc SignUpPro (SignUpProRequest) returns (ProviderInfo) {
    option (google.api.http) = {
      post: "/api/v1/providers/signup"
      body: "*"
    };
  }

  // get token of provider
  rpc JoinAsProvider (JoinAsProviderRequest) returns (JoinAsProviderResponse){
    option (google.api.http) = {
      post: "/api/v1/providers"
    };
  }

  // Update information of a professional
  rpc UpdatePro (UpdateProRequest) returns (ProviderInfo) {
    option (google.api.http) = {
      put: "/api/v1/providers/{id}"
      body: "*"
    };
  }

  // Add a payment method for a professional
  rpc AddPaymentMethodPro (AddPaymentMethodProRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/api/v1/providers/add-payment-method"
      body: "*"
    };
  }

  // Reply to a review as a professional
  rpc ReplyReviewPro (ReplyReviewProRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/api/v1/providers/reply-review"
      body: "*"
    };
  }

  // Review a professional as a user
  rpc ReviewPro (ReviewProRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/api/v1/providers/review"
      body: "*"
    };
  }

  // Add a service offered by a professional
  rpc AddServicePro (AddServiceProRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/api/v1/providers/add-service"
      body: "*"
    };
  }

  // Add social media information for a professional
  rpc AddSocialMediaPro (AddSocialMediaProRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/api/v1/providers/add-social-media"
      body: "*"
    };
  }

  // Add social media information for a professional
  rpc UpdateSocialMediaPro (UpdateSocialMediaProRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      put: "/api/v1/providers/update-social-media"
      body: "*"
    };
  }

  // Add social media information for a professional
  rpc DeleteSocialMediaPro (DeleteSocialMediaProRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/api/v1/providers/delete-social-media"
    };
  }

  // Delete a service offered by a professional
  rpc DeleteServicePro (DeleteServiceProRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/api/v1/providers/delete-service"
      body: "*"
    };
  }
}

message ProviderInfo {
  string id = 1;
  string created_at = 2;
  string created_by = 3;
  string updated_at = 4;
  string updated_by = 5;
  string deleted_by = 6;
  string deleted_at = 7;
  string name = 8;
  string introduction = 9;
  int32 years = 11;
  PostalCode postal_code = 12;
  int32 num_hires = 13;
  repeated SocialMedia social_medias = 14;
  repeated PaymentMethod payment_method = 15;
}


message FilterProRequest {
  optional string name = 1;
  optional string introduction = 2;
  optional int32 years = 3;
  optional string postal_code = 4;
  optional string service_name = 5;
}

// Request message for finding providers
message FindProsRequest {
  // Define your request fields here
  optional FilterProRequest filter = 1;
  optional Pagination pagination = 2;
}


message ProviderViewInfor {
  message OverviewRating {
    int32 num_rating = 1;
    double avg_rating = 2;
  }
  string id = 1;
  string created_at = 2;
  string created_by = 3;
  string updated_at = 4;
  string updated_by = 5;
  string deleted_by = 6;
  string deleted_at = 7;
  string name = 8;
  string introduction = 9;
  int32 years = 11;
  PostalCode postal_code = 12;
  int32 num_hires = 13;
  OverviewRating rating = 14;
}

// Response message for finding providers
message FindProsResponse {
  repeated ProviderViewInfor providers = 1;
}

// Request message for signing up as a professional
message SignUpProRequest {
  string name = 1;
  string introduction = 2;
  int32 years = 3;
  string postal_code = 4;
}

// Request message for updating information of a professional
message UpdateProRequest {
  string id = 5;
  optional string name = 1;
  optional string introduction = 2;
  optional int32 years = 3;
  optional string postal_code = 4;
}


// Request message for adding a payment method for a professional
message AddPaymentMethodProRequest {
  string name = 9;
}


// Request message for replying to a review as a professional
message ReplyReviewProRequest {
  string review_id = 1;
  string reply = 2;
}


// Request message for reviewing a professional as a user
message ReviewProRequest {
  string provider_id = 1;
  int32  rating = 2;
  string comment = 3;
  optional string note = 4;
  string user_name = 5;
  string hire_id  = 6;
}

// Request message for adding a service offered by a professional
message AddServiceProRequest {
  repeated string services_id = 1;
}

// Request message for deleting a service offered by a professional
message DeleteServiceProRequest {
  repeated string services_id = 1;
}

// Request message for adding social media information for a professional
message AddSocialMediaProRequest {
  string name = 1;
  string link = 2;
}

// Request message for adding social media information for a professional
message UpdateSocialMediaProRequest {
  string id =3;
  string name = 1;
  string link = 2;
}

message DeleteSocialMediaProRequest {
  string id =3;
}


// Request message for finding professional by ID
message FindProByIdRequest {
  string id = 1;
}

// Response message for finding professional by ID
message FindProByIdResponse {
  ProviderInfo provider = 1;
}

message ProviderProfileResponse {
  ProviderInfo provider = 1;
}

message DeleteProByIdRequest {
  string id = 1;
}

message GetAllServiceOfProviderRequest {
  string id = 1;
}

message GetAllReviewOfProviderRequest {
  string id = 1;
}

message GetAllServiceOfProviderResponse {
  repeated Service services = 1;
}

message GetAllReviewOfProviderResponse {
  repeated Review reviews =1;
}


// Service definition for managing hires
service HireService {
  // Retrieves all hires
  rpc FindAllHire (FindAllHireRequest) returns (FindAllHireResponse) {
    option (google.api.http) = {
      get: "/api/v1/hires" // Customize the HTTP path as needed
    };
  }

  // Creates a new hire
  rpc CreateHire (CreateHireRequest) returns (CreateHireResponse) {
    option (google.api.http) = {
      post: "/api/v1/hires"
      body:"*"
    };
  }

  // Updates the status of a hire
  rpc UpdateStatusHire (UpdateStatusHireRequest) returns (UpdateStatusHireResponse) {
    option (google.api.http) = {
      patch: "/api/v1/hires/{hire_id}" // Use path variable for hire ID
      body:"*"
    };
  }

  // Deletes a hire (assuming it's idempotent)
  rpc DeleteHire (DeleteHireRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/api/v1/hires/{hire_id}"
    };
  }
}

message FindAllHireRequest {
  // Optional filter by user ID
  optional string user_id = 1;

  // Optional filter by provider ID
  optional string provider_id = 2;

  // Optional filter by status (can be omitted)
  optional string status = 3;
}


message HireInfor {
    string id = 1;
    string created_at = 2;
    string created_by = 3;
    string updated_at = 4;
    string updated_by = 5;
    string deleted_by = 6;
    string deleted_at = 7;
    string user_id = 8;
    string provider_id =9;
    string service_id = 10;
    string work_time_from = 11;
    string work_time_to = 12;
    string status = 13;
    string payment_method_id = 14;
    string issue = 15;
    Service service  =16;
    ProviderInfo provider = 17;
    optional Review review  =18;
}

message FindAllHireResponse {
  repeated HireInfor hires = 1; // List of Hire objects
}


message CreateHireRequest {
  string provider_id =9;
  string service_id = 10;
  string work_time_from = 11;
  string work_time_to = 12;
  optional string status = 13;
  optional string payment_method_id = 14;
  string issue = 15;
}

message CreateHireResponse {
  Hire hire = 1; // Created Hire object with generated ID
}

message UpdateStatusHireRequest {
  string hire_id = 1; // ID of the Hire to update
  string new_status = 2; // Updated status value
}

message UpdateStatusHireResponse {
  Hire hire = 1; // Updated Hire object reflecting the new status
}


message DeleteHireRequest {
  string hire_id = 1; // ID of the Hire to delete
}


message JoinAsProviderRequest {
}

message JoinAsProviderResponse {
  string provider_token = 1;
}