version: "3"

services:
    reverse-proxy:
        container_name: reverse-proxy
        # The official v3 Traefik docker image
        image: traefik:v3.0
        # Enables the web UI and tells Traefik to listen to docker
        command:
            - "--providers.docker=true"
            - "--api.insecure=true"
            - "--entryPoints.backend.address=:3000"
            - "--api.dashboard=true"
        ports:
            - "3000:3000"
            - "8080:8080"
        volumes:
            # So that Traefik can listen to the Docker events
            - /var/run/docker.sock:/var/run/docker.sock
    elastic:
        image: docker.elastic.co/elasticsearch/elasticsearch:8.14.1
        container_name: elasticsearch
        environment:
            - ELASTIC_PASSWORD=123456a@
            - KIBANA_PASSWORD=123456a@
            - discovery.type=single-node
            - xpack.security.http.ssl.enabled=false
            - xpack.license.self_generated.type=trial
        ports:
            - 9200:9200
        volumes:
            - ./setup_kibana_password.sh:/usr/local/bin/setup_kibana_password.sh
        entrypoint:
            - /bin/bash
            - -c
            - |
                /usr/local/bin/setup_kibana_password.sh &
                /bin/tini -- /usr/local/bin/docker-entrypoint.sh eswrapper
    kibana:
        image: docker.elastic.co/kibana/kibana:8.14.1
        container_name: kibana
        ports:
            - 5601:5601
        environment:
            - ELASTICSEARCH_URL=http://elasticsearch:9200
            - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
            - ELASTICSEARCH_USERNAME=kibana_system
            - ELASTICSEARCH_PASSWORD=123456a@
            - xpack.security.enabled=false
            - xpack.license.self_generated.type=basic
        depends_on:
            - elastic
        restart: unless-stopped

    kafka:
        image: "bitnami/kafka:3.3"
        container_name: kafka
        ports:
            - "9094:9094"
        environment:
            - KAFKA_CFG_NODE_ID=0
            - KAFKA_CFG_PROCESS_ROLES=controller,broker
            - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://:9094
            - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092,EXTERNAL://localhost:9094
            - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT,PLAINTEXT:PLAINTEXT
            - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
            - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
            - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true

    cerbos:
        image: ghcr.io/cerbos/cerbos:0.37.0
        container_name: cerbos
        ports:
            - 3592:3592
        volumes:
            - ./cerbos/policies:/policies

    postgres:
        image: postgres:16.2
        container_name: postgres
        restart: always
        # set shared memory limit when using docker-compose
        shm_size: 128mb
        # or set shared memory limit when deploy via swarm stack
        volumes:
            - type: tmpfs
              target: /dev/shm
              tmpfs:
                  size: 134217728 # 128*2^20 bytes = 128Mb
        ports:
            - 5433:5432
        environment:
            - POSTGRES_USER=hiro
            - POSTGRES_PASSWORD=123456a@
            - POSTGRES_DB=bee-home

    redis:
        image: redis:7.2
        container_name: redis

    provider.server:
        image: provider.server
        container_name: provider.server
        build:
            dockerfile: ./pro-manager-service/Dockerfile
        volumes:
            - ./pro-manager-service/.docker.env:/pro-manager-service/.env
        depends_on:
            - postgres
            - redis
        # ports:
        #     - 3003:3003
        restart: unless-stopped
        labels:
            - "traefik.http.routers.router2.entryPoints=backend"
            - "traefik.http.routers.router2.rule=PathPrefix(`/api/v1/providers`) || PathPrefix(`/api/v1/hires`) || PathPrefix(`/api/v1/services`) || PathPrefix(`/api/v1/group_services`)"
            - "traefik.http.routers.router2.service=service2"
            - "traefik.http.services.service2.loadbalancer.server.port=3003"

    user.server:
        image: user.server
        container_name: user.server
        build:
            dockerfile: ./user-manager-service/Dockerfile
        volumes:
            - ./user-manager-service/.docker.env:/user-manager-service/.env
        depends_on:
            - postgres
            - redis
        # ports:
        #     - 3000:3000
        restart: unless-stopped
        labels:
            - "traefik.http.routers.router1.entryPoints=backend"
            - "traefik.http.routers.router1.rule=PathPrefix(`/api/v1/auth`) || PathPrefix(`/api/v1/user`) || PathPrefix(`/api/v1/profile`)"
            - "traefik.http.routers.router1.service=service1"
            - "traefik.http.services.service1.loadbalancer.server.port=3000"
            - "traefik.http.middlewares.authorized.forwardauth.address=http://172.17.0.1:3133"
            - "traefik.http.routers.router1.middlewares=authorized"
    mongo:
        image: mongo:jammy
        container_name: mongo
        restart: always
        environment:
            MONGO_INITDB_ROOT_USERNAME: hiro
            MONGO_INITDB_ROOT_PASSWORD: 12345678
            MONGO_INITDB_DATABASE: lms
        ports:
            - "27017:27017"
